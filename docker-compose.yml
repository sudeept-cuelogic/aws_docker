version: "3"
services:
  web:
    image: nginx:1.12
    links:
      - 'app'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/aws-docker.conf:ro
    ports:
      - '80:80'
    networks:
      - 'default'
    # command: |
    #   /bin/bash -c "echo '
    #   server {
    #     listen 9200;
    #     add_header X-Frame-Options "SAMEORIGIN";
    #     location / {
    #         proxy_pass http://elasticsearch:9200;
    #         proxy_http_version 1.1;
    #         proxy_set_header Connection keep-alive;
    #         proxy_set_header Upgrade $$http_upgrade;
    #         proxy_set_header Host $$host;
    #         proxy_set_header X-Real-IP $$remote_addr;
    #         proxy_cache_bypass $$http_upgrade;
    #     }
    #   }' | tee /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
  app:
    build: .
    volumes:
      - /var/www/aws-docker
    ports:
      - '3000'
    networks:
      - 'default'
    command: rails server -p 3000
    links:
      - search
  search:
    image: elasticsearch:5
    ports:
      - '9200:9200'
      - '9300:9300'
    networks:
      - 'default'
    command: [ elasticsearch, -E, network.host=0.0.0.0, -E, discovery.zen.ping.unicast.hosts=elasticsearch, -E, discovery.zen.minimum_master_nodes=1 ]
  # redis:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile-redis
  #   ports: ['6379']
  #   networks: ['default']


# version: '3'
# services:
#   web:
#     image: 'sudeeptcuelogic/aws-docker:web'
#     ports:
#       - '5000:80'
#     networks:
#       - 'default'
#     command: |
#       /bin/bash -c "echo '
#       server {
#         listen 9200;
#         add_header X-Frame-Options "SAMEORIGIN";
#         location / {
#             proxy_pass http://elasticsearch:9200;
#             proxy_http_version 1.1;
#             proxy_set_header Connection keep-alive;
#             proxy_set_header Upgrade $$http_upgrade;
#             proxy_set_header Host $$host;
#             proxy_set_header X-Real-IP $$remote_addr;
#             proxy_cache_bypass $$http_upgrade;
#         }
#       }' | tee /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
#   app:
#     image: 'sudeeptcuelogic/aws-docker:app'
#     volumes:
#       - '/var/www/aws-docker'
#     ports:
#       - '5001'
#     networks:
#       - 'default'
#     deploy:
#       mode: replicated
#       replicas: 2
#       resources:
#         limits:
#             cpus: '0.1'
#             memory: 50M
#       restart_policy:
#         condition: on-failure
#   search:
#     image: elasticsearch:5
#     ports:
#       - '9200:9200'
#       - '9300:9300'
#     networks:
#       - 'default'
#     deploy:
#       mode: replicated
#       replicas: 2
#     command: [ elasticsearch, -E, network.host=0.0.0.0, -E, discovery.zen.ping.unicast.hosts=elasticsearch, -E, discovery.zen.minimum_master_nodes=1 ]
#   visualizer:
#     image: dockersamples/visualizer:stable
#     ports:
#       - '8080:8080'
#     stop_grace_period: 1m30s
#     volumes:
#       - '/var/run/docker.sock:/var/run/docker.sock'
#     deploy:
#       placement:
#         constraints: [node.role == manager]
#   redis:
#     image: redis:3.2-alpine
#     ports: ['6379']
#     networks: ['default']


# version: '3'
# services:
#   web:
#     image: 'sudeeptcuelogic/aws-docker:web'
#     ports:
#       - '5000:80'
#     networks:
#       - 'default'
#     command: |
#       /bin/bash -c "echo '
#       server {
#         listen 9200;
#         add_header X-Frame-Options "SAMEORIGIN";
#         location / {
#             proxy_pass http://elasticsearch:9200;
#             proxy_http_version 1.1;
#             proxy_set_header Connection keep-alive;
#             proxy_set_header Upgrade $$http_upgrade;
#             proxy_set_header Host $$host;
#             proxy_set_header X-Real-IP $$remote_addr;
#             proxy_cache_bypass $$http_upgrade;
#         }
#       }' | tee /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
#   app:
#     image: 'sudeeptcuelogic/aws-docker:app'
#     volumes:
#       - '/var/www/aws_docker'
#     ports:
#       - '5001:80'
#     networks:
#       - 'default'
#     deploy:
#       mode: 'replicated'
#       replicas: 1
#       restart_policy:
#         condition: on-failure
#     # command: rails server
#   search:
#     image: elasticsearch:5
#     ports:
#       - '9200:9200'
#       - '9300:9300'
#     networks:
#       - 'default'
#     deploy:
#       mode: replicated
#       replicas: 1
#     command: [ elasticsearch, -E, network.host=0.0.0.0, -E, discovery.zen.ping.unicast.hosts=elasticsearch, -E, discovery.zen.minimum_master_nodes=1 ]
